---
- hosts: all
  become: true
  roles:
    - common
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - python3-pip

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Configure node ip
      lineinfile:
        create: yes
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ kube_vm_ipaddr }}" --apiserver-cert-extra-sans="{{ kube_vm_ipaddr }}"  --node-name k8s-master --pod-network-cidr={{ kube_pod_cidr }}

    - name: Create ~vagrant/.kube directory
      file: 
        name: /home/vagrant/.kube
        state: directory
        owner: vagrant

    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config

    - name: Chown ~vagrant/.kube/config directory
      file: 
        name: /home/vagrant/.kube/config
        owner: vagrant

    - name: Install calico pod network
      become: false
      command: kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    # Enable this for multi node kubernetes cluster
    #- name: Copy join command to local file
    #become: false
    #local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

    - name: Enable RPF check
      become: true
      sysctl:
        name: net.ipv4.conf.all.rp_filter
        value: '0'
        sysctl_set: yes
        state: present

    - name: Get k8s config into a variable
      slurp:
        src: /home/vagrant/.kube/config
      register: config

    - set_fact:
        config_data: "{{ config['content'] | b64decode }}"

    - name: Copy config to local directory
      become: false
      local_action: copy content="{{ config_data }}" dest="./artifacts/config"

    - name: Remove taint on master node (so pods can deploy)
      become: false
      command: kubectl taint node k8s-master node-role.kubernetes.io/master:NoSchedule-

  handlers:
    - name: docker status
      service: name=docker state=started
